name: Deploy Backend (ECS Blue/Green)

on: { push: { branches: [main] } }

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-2
  ECS_CLUSTER: msj-ecs-cluster
  ECS_SERVICE: msj-TD-BE-service-26hram3b
  ECR_REPO: msj/be
  CONTAINER_NAME: msj-be

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::286387522454:role/msj-role-github
          aws-region: ${{ env.AWS_REGION }}

      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push
        env:
          REG: ${{ steps.login-ecr.outputs.registry }}
          TAG: ${{ github.sha }}
        run: |
          docker build -t $REG/$ECR_REPO:$TAG .
          docker push $REG/$ECR_REPO:$TAG
          echo "IMAGE=$REG/$ECR_REPO:$TAG" >> $GITHUB_ENV

      - name: Render task def
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-def.json   # 저장해둔 베이스 TD 파일
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.IMAGE }}

      - name: Register task def
        id: reg
        run: |
          ARN=$(aws ecs register-task-definition \
            --cli-input-json file://${{ steps.render.outputs.task-definition }} \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TD=$ARN" >> $GITHUB_ENV

      - name: Update service (triggers blue/green)
        run: |
          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$ECS_SERVICE" \
            --task-definition "$TD" \
            --force-new-deployment
          aws ecs wait services-stable --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE"
